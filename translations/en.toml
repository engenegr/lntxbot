No = "No"
Yes = "Yes"
Cancel = "Cancel"
Canceled = "Canceled"
Completed = "Completed"
Error = "Error"
Checking = "Checking"
NotSupported = "Not supported"
TxCanceled = "Transaction canceled."
Unexpected = "Unexpected error: please report."

HiddenSource = "Hidden message <code>{{.Id}}</code> revealed by {{.Revealer}}. You've got {{.Sats}} sat."
HiddenReveal = "{{.Sats}} sat paid to reveal the message <code>{{.Id}}</code>."
HiddenMsgFail = "Failed to reveal: {{.Err}}"
HiddenMsgNotFound = "Hidden message not found."
HiddenMsgError = "Error locating this hidden message."

FundraiseComplete = "Fundraising for {{.Recepient}} completed!"
FundraiseReceiverMsg = "You've received {{.Sats}} sat of a fundraise from {{.Donors}}s"
FundraiseGiverMsg = "You've given {{.Donate}} in a fundraise to {{.Recepient}}s."

GiveflipWinnerMsg = "{{.Winner}} got {{.Sats}} from {{.Giver}}. {{.Losers}} didn't get anything."
GiveflipAd = "Join and get a chance to win {{.Prize}}! {{.Participants}} out of {{.MaxParticipants}} spots left!"

CoinflipWinnerMsg = "You're the winner of a coinflip for a prize of {{.Prize}} sat. The losers were: {{.Losers}}."
CoinflipGiverMsg = "You've lost {{.Prize}} in a coinflip. The winner was {{.Losers}}."
CoinflipAd = "Pay {{.Sats}} and get a chance to win {{.Prize}}! {{.Gamblers}} out of {{.MaxPlayers}} spots left!"
SatsGivenPublic = "{{.Sats}} sat given from {{.From}} to {{.To}}."
HowToClaimMessage = "To manage your funds, start a conversation with @{{.ServiceId}}."

CallbackCoinflipWinner = "Coinflip winner: {{.Winner}}"
CallbackWinner = "{{.User}}\nWinner: {{.Winner}}"
CallbackFromUser = "{{.User}} has sent you {{.Sats}} sat on {{.BotOp}}."
CallbackFailed = "Failed to claim {{.BotOp}}: {{.Err}}"
CallbackError = "\n\nError in {{.BotOp}}."
CallbackExpired = "Expired {{.BotOp}}."
CallbackAttempt = "Attempting payment."
CallbackSending = "Sending payment."
CallbackButtonExpired = "The payment confirmation button has expired."

UserAllowed = "Invoice paid. {{.User}} allowed."
SpamFilterMessage = "Hello, {{.User}}. You have 15min to pay the following invoice for {{.Sats}} sat if you want to stay in this group:"

PaymentFailed = "Payment failed. /log{{.ShortHash}}"
PaidMessage = "Paid with <b>{{.Sats}} sat</b> (+ {{.Fee}} fee). \n\n<b>Hash:</b> {{.Hash}}\n\n<b>Proof:</b> {{.Preimage}}\n\n/tx{{.ShortHash}}"
DBError = "Database error: failed to mark the transaction as not pending."
InsufficientBalance = "Insufficient balance for {{.Purpose}}. Needs {{.Sats}}.0f sat more."
TooSmallPayment = "That's too small, please start your {{.Purpose}} with at least 40 sat."

PaymentRecieved = "Payment received: {{.Sats}}. /tx{{.Hash}}."
FailedToSavePayReq = "Payment received, but failed to save on database. Please report this issue: <code>{{.Label}}</code>, hash: <code>{{.Hash}}</code>"

SimilarPerhaps = " Perhaps /{{.Similar}}?"
SimilarOrMaybe = " Or maybe /{{.Similar}}?"
SimilarMsg = "/{{.Method}} command not found. Do you mean /{{.Similar}}?"

NoSpammyMsg = "Not spamming anymore."
SpammyMsg = "This group is now spammy."
FilterMsg = "New entrants will have to pay an invoice of {{.Sat}} sat."
FreeJoin = "This group is now free to join."
CancelTemp = "cancel={{.User}}"
PayTemp = "pay={{.Hash}}"
AskToConfirm = "\n\nPay the invoice described above?"

HelpIntro = "<pre>{{.Help}}</pre>"
HelpString = "For more information on each command please type <code>/help &lt;command&gt;</code>."
MethodHelpHeader = "<pre>/{{.MainName}} {{.Args}}</pre>\n{{.Desc}}\n\n<b>Examples</b>\n{{.Exam}}\n\n<b>Inline query</b>\n{{.Inline}}\n\n<b>Aliases:</b> <code>{{.Aliases}}</code>"
InlineHelp = "Can also be called as an <a href=\"https://core.telegram.org/bots/inline\">inline query</a> from group or personal chats where the bot isn't added. The syntax is similar, but simplified: <code>@{{.ServiceId}} {{.InlineExample}}</code> then wait for a \"search\" result to appear."

receiveHelpArgs = "(&lt;satoshis&gt;|any) [&lt;description&gt;...] [--preimage=&lt;preimage&gt;]"
receiveHelpDesc = "Generates a BOLT11 invoice with given satoshi value. Amounts will be added to your bot balance. If you don't provide the amount it will be an open-ended invoice that can be paid with any amount."
receiveHelpExam = "<code>/receive 320 for something</code>\nGenerates an invoice for 320 sat with the description \"for something\"\n<code>/invoice any</code>\nGenerates an invoice with undefined amount."

payHelpArgs = "[now] [&lt;invoice&gt;] [&lt;satoshis&gt;] [sat]]"
payHelpDesc = "Decodes a BOLT11 invoice and asks if you want to pay it (unless /paynow). This is the same as just pasting or forwarding an invoice directly in the chat. Taking a picture of QR code containing an invoice works just as well (if the picture is clear)."
payHelpExam = "<code>/pay lnbc1u1pwvmypepp5kjydaerr6rawl9zt7t2zzl9q0rf6rkpx7splhjlfnjr869we3gfqdq6gpkxuarcvfhhggr90psk6urvv5cqp2rzjqtqkejjy2c44jrwj08y5ygqtmn8af7vscwnflttzpsgw7tuz9r407zyusgqq44sqqqqqqqqqqqqqqqgqpcxuncdelh5mtthgwmkrum2u5m6n3fcjkw6vdnffzh85hpr4tem3k3u0mq3k5l3hpy32ls2pkqakpkuv5z7yms2jhdestzn8k3hlr437cpajsnqm </code>\nPay this invoice for 100 sat. \n<code>/paynow lnbc1u1pwvmypepp5kjydaerr6rawl9zt7t2zzl9q0rf6rkpx7splhjlfnjr869we3gfqdq6gpkxuarcvfhhggr90psk6urvv5cqp2rzjqtqkejjy2c44jrwj08y5ygqtmn8af7vscwnflttzpsgw7tuz9r407zyusgqq44sqqqqqqqqqqqqqqqgqpcxuncdelh5mtthgwmkrum2u5m6n3fcjkw6vdnffzh85hpr4tem3k3u0mq3k5l3hpy32ls2pkqakpkuv5z7yms2jhdestzn8k3hlr437cpajsnqm </code> \nPay this invoice without asking for confirmation. \n<code>/pay lnbc1pwvm0pxpp5n2qa3pnfmu7p9vaqspn2cwp7ej44mh6tf77pnxpvfked8z5wg64sdqlypdkcmn50p3x7ap0gpnxjct5dfskvhgxqyz5vqcqp2rzjqfxj8p6qjf5l8du7yuytkwdcjhylfd4gxgs48t65awjg04ye80mq7zyhg5qq5ysqqqqqqqqqqqqqqqsqrcaycpuwzwv4u5yg94ne4ct2lrkmleuq4ly5qcjueuu6qkx5d4qdun5xx0wxp6djch093svm06szy0ru9kvcpmzs7vzjpvxfwyep8fugsq96d3ww 3000 </code> \n Pay 3000 sat for this invoice with undefined amount. \n<code>/pay </code> \n When sent as a reply to another message containing an invoice (for example, in a group), asks privately if you want to pay it."

sendHelpArgs = "[anonymously] &lt;satoshis&gt; [&lt;receiver&gt;...] [--anonymous]"
sendHelpDesc = "Sends satoshis to other Telegram users. The receiver is notified on his chat with the bot. If the receiver has never talked to the bot or have blocked it he can't be notified, however. In that case you can cancel the transaction afterwards in the /transactions view."
sendHelpExam = "<code>/send 500 @username</code>\n Sends 500 satoshis to Telegram user @username.\n<code>/tip 100</code>\nWhen sent as a reply to a message in a group where the bot is added, this will send 100 satoshis to the author of the message.\n<code>/send anonymously 1000 @someone</code>\nTelegram user @someone will see just: \"Someone has sent you 1000 satoshis\"."

balanceHelpDesc = "Shows your current balance in satoshis, plus the sum of everything you've received and sent within the bot and the total amount of fees paid."

giveawayHelpArgs = "&lt;satoshis&gt;"
giveawayHelpDesc = "Creates a button in a group chat. The first person to click the button gets the satoshis."
giveawayHelpExam = "<code>/giveaway 1000 </code>\nOnce someone clicks the 'Claim' button 1000 satoshis will be transferred from you to them."

coinflipHelpArgs = "&lt;satoshis&gt; [&lt;num_participants&gt;]"
coinflipHelpDesc = "Starts a fair lottery with the given number of participants. Everybody pay the same amount as the entry fee. The winner gets it all. Funds are only moved from participants accounts when the lottery is actualized."
coinflipHelpExam = "<code>/coinflip 100 5</code>\n5 participants needed, winner will get 500 satoshis (including its own 100, so it's 400 net satoshis)."

giveflipHelpArgs = "&lt;satoshis&gt; [&lt;num_participants&gt;]"
giveflipHelpDesc = "Starts a giveaway, but instead of giving to the first person who clicks, the amount is raffled between first x clickers."
giveflipHelpExam = "<code>/giveflip 100 5</code>\n5 participants needed, winner will get 500 satoshis from the command issuer."

fundraiseHelpArgs = "&lt;satoshis&gt; &lt;num_participants&gt; &lt;receiver&gt;..."
fundraiseHelpDesc = "Starts a crowdfunding event with a predefined number of participants and contribution amount. If the given number of participants contribute, it will be actualized. Otherwise it will be canceled in some hours."
fundraiseHelpExam = "<code>/fundraise 10000 8 @user</code>\nTelegram @user will get 80000 satoshis after 8 people contribute."

bluewalletHelpArgs = "[refresh]"
bluewalletHelpDesc = "Returns your credentials for importing your bot wallet on BlueWallet. You can use the same account from both places interchangeably."
bluewalletHelpExam = "<code>/bluewallet</code>\nPrints a string like \"lndhub://&lt;login&gt;:&lt;password&gt;@&lt;url&gt;\" which must be copied and pasted on BlueWallet's import screen.\n<code>/bluewallet refresh</code>\nErases your previous password and prints a new string. You'll have to reimport the credentials on BlueWallet after this step. Only do it if your previous credentials were compromised."

toggleHelpArgs = "(ticket [&lt;price&gt;]|spammy)"
toggleHelpDesc = "Toggles bot features in groups on/off. In supergroups it only be run by group admins."
toggleHelpExam = "<code>/toggle ticket 10</code>\nNew group entrants will be prompted to pay 10 satoshis in 30 minutes or be kicked. Useful as an antispam measure.\n<code>/toggle ticket</code>\nStop charging new entrants a fee.\n<code>/toggle spammy</code>\n'spammy' mode is off by default. When turned on, tip notifications will be sent in the group instead of only privately."

helpHelpArgs = "[&lt;command&gt;]"
helpHelpDesc = "Shows full help or help about specific command."

stopHelpDesc = "The bot stops showing you notifications."

ConfirmInvoice = "{{.Sats}} sat ({{.USD}})\n<i>{{.Desc}}</i>\n<b>Hash</b>: {{.Hash}}\n<b>Node</b>: {{.Node}} ({{.Alias}})"
NoInvoice = "Invoice not provided."
BalanceMsg = "<b>Balance</b>: {{.Sats}} sat ({{.USD}})\n<b>Total received</b>: {{.Received}} sat\n<b>Total sent</b>: {{.Sent}} sat\n<b>Total fees paid</b>: {{.Fees}} sat"
TxHistTitleOffset = "Transactions from {{.From}} to {{.To}}\n"
TxHistTitle = "Latest {{.Limit}} transactions\n"
FundraiseMsg = "A fundraising to {{.ToUser}} was started!\nContributors needed for completion: {{.Participants}}\nEach pays: {{.Sats}} sat\nFinal amount: {{Fund}}\nHave contributed: {{Registered}}"
FailedUser = "Failed to parse receiver name."
LotteryMsg = "A lottery round is starting!\nEntry fee: {{.EntrySats}} sat\nTotal participants: {{.Participants}}\nPrize: {{.Prize}}\nRegistered: {{.Registered}}"
GiveFlipMsg = "{{.User}} is giving {{.Sats}} sat away to a lucky person out of {{.Participants}}!"
InvalidPartNumber = "Invalid number of participants: "
GiveAwayMsg = "{{.User}} is giving {{.Sats}} sat away!"
InvalidAmount = "Invalid amount: "
UserSentToUser = "{{.Sats}} sat sent to {{.User}}{{.Warning}}."
NoUserWarning = " (couldn't notify {{.User}} as they haven't started a conversation with the bot)"
UserSentYouSats = "{{.User}} has sent you {{.Sats}} sat."
ReceivedSats = "Someone has sent you {{.Sats}} sat."
FailedSend = "Failed to send: "
SaveReceiverFail = "Failed to save receiver. This is probably a bug."
CantSend = "Can't send "
NoReceiver = ". Missing receiver!"
FailedInvoice = "Failed to generate invoice"
InvalidAmt = "Invalid amount: "
StopNotify = "Notifications stopped."
Welcome = "Your account is created."
WrongCommand = "Could not understand the command. /help"
RetractQuestion = "\n\nRetract unclaimed tip?"
RecheckPending = "\n\nRecheck pending payment?"
TxNotFound = "Couldn't find transaction {{.HashFirstChars}}."
TxInfo = "<code>{{.Status}}</code> {{ .PeerActionDescription}} on {{.TimeFormatted}} {{ .ClaimStatus}}\n<i>{{.Description}}</i>\n<b>Payee</b>: {{{.PayeeLink}}} ({{.PayeeAlias}})\n<b>Hash</b>: {{.Hash}}\n<b>Preimage</b>: {{.PreimageString}}\n<b>Amount</b>: {{.Amount}} sat\n<b>Fee paid</b>: {{.Fees}}"